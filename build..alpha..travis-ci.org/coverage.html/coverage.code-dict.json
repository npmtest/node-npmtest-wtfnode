{"/home/travis/build/npmtest/node-npmtest-wtfnode/test.js":"/* istanbul instrument in package npmtest_wtfnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wtfnode/lib.npmtest_wtfnode.js":"/* istanbul instrument in package npmtest_wtfnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wtfnode = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wtfnode = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wtfnode/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wtfnode && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wtfnode */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wtfnode\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wtfnode.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wtfnode.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wtfnode.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wtfnode.__dirname + '/lib.npmtest_wtfnode.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wtfnode/node_modules/wtfnode/index.js":"#!/usr/bin/env node\n\n'use strict';\n\n// Don't require these until we've hooked certain builtins\nvar ChildProcess,\n    dgramSocket,\n    HttpServer,\n    HttpsServer,\n    child_process,\n    cluster,\n    path,\n    Server,\n    Socket,\n    Timer,\n    TlsServer;\n\nvar NODE_VERSION = process.version.slice(1).split('.').map(function (v) { return parseInt(v, 10); });\n\nvar DONT_INSTRUMENT = {\n    'ChildProcess': NODE_VERSION[0] === 0 && NODE_VERSION[1] <= 10\n};\n\nfunction timerCallback(thing) {\n    if (typeof thing._repeat === 'function') { return '_repeat'; }\n    if (typeof thing._onTimeout === 'function') { return '_onTimeout'; }\n    if (typeof thing._onImmediate === 'function') { return '_onImmediate'; }\n}\n\n// hook stuff\n(function () {\n    var _Error_prepareStackTrace = Error.prepareStackTrace;\n    var hooked = function (_, stack) { return stack; };\n\n    Object.defineProperty(global, '__stack', {\n        get: function(){\n            Error.prepareStackTrace = hooked\n            var err = new Error();\n            var stack = err.stack.map(function (item) {\n                return {\n                    file: item.getFileName(),\n                    line: item.getLineNumber()\n                };\n            });\n            Error.prepareStackTrace = _Error_prepareStackTrace;\n            return stack;\n        }\n    });\n\n    function findCallsite(stack) {\n        for (var i = 0; i < stack.length; i++) {\n            // Ignore frames from:\n            //  - wtfnode by excluding __filename\n            //  - builtins by excluding files with no path separator\n            //  - internal builtins by excluding files beginning with 'internal/'\n            //    (even on windows, the stack trace uses unix separators for these)\n            if (stack[i].file !== __filename &&\n                stack[i].file.indexOf(path.sep) !== -1 &&\n                stack[i].file.slice(0, 9) !== 'internal/'\n            ) {\n              return stack[i];\n            }\n        }\n        return null;\n    }\n\n    // wraps a function with a proxy function holding the first userland call\n    // site in the stack and some other information, for later display\n    // this will probably screw up any code that depends on the callbacks having\n    // a 'name' or 'length' property that is accurate, but there doesn't appear\n    // to be a way around that :(\n    var consolelog = console.log.bind(console);\n    function wrapFn(fn, name, isInterval, callback) {\n        if (typeof fn !== 'function') { return fn; }\n\n        var wrapped = (\n            typeof callback === 'function' ?\n            function () {\n                callback.call(this, wrapped);\n                return fn.apply(this, arguments);\n            }\n            :\n            function () {\n                return fn.apply(this, arguments);\n            }\n        );\n\n        var stack = __stack;\n\n        // this should inherit 'name' and 'length' and any other properties that have been assigned\n        Object.getOwnPropertyNames(fn).forEach(function (key) {\n            try {\n                Object.defineProperty(wrapped, key, Object.getOwnPropertyDescriptor(fn, key));\n            } catch (e) {\n                // some properties cannot be redefined, not much we can do about it\n            }\n        });\n\n        // we use these later to identify the source information about an open handle\n        if (!wrapped.hasOwnProperty('__callSite')) {\n            Object.defineProperties(wrapped, {\n                __fullStack: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: stack\n                },\n                __name: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: name || '(anonymous)'\n                },\n                __callSite: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: findCallsite(stack)\n                },\n                __isInterval: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: isInterval\n                }\n            });\n        }\n        return wrapped;\n    }\n\n    var GLOBALS = { };\n    function wrapTimer(type, isInterval) {\n        GLOBALS[type] = global[type];\n        global[type] = function () {\n            var args = [ ], i = arguments.length;\n            while (i--) { args[i] = arguments[i]; }\n\n            var ret = GLOBALS[type].apply(this, args);\n            var cbkey = timerCallback(ret);\n            if (ret[cbkey]) {\n                ret[cbkey] = wrapFn(ret[cbkey], args[0].name, isInterval);\n            }\n\n            return ret;\n        };\n    };\n    wrapTimer('setTimeout', false);\n    wrapTimer('setInterval', true);\n\n    var EventEmitter = require('events').EventEmitter;\n    var _EventEmitter_addListener = EventEmitter.prototype.addListener;\n    var _EventEmitter_init = EventEmitter.init;\n\n    if (!DONT_INSTRUMENT['ChildProcess']) {\n        // this will conveniently be run on new child processes\n        EventEmitter.init = function () {\n            var callSite = findCallsite(__stack);\n            if (callSite && !this.hasOwnProperty('__callSite')) {\n                Object.defineProperties(this, {\n                    __callSite: {\n                        enumerable: false,\n                        configurable: false,\n                        writable: false,\n                        value: findCallsite(__stack)\n                    }\n                });\n            }\n\n            return _EventEmitter_init.apply(this, arguments);\n        };\n    }\n\n    EventEmitter.prototype.on =\n    EventEmitter.prototype.addListener = function (/*type, listener*/) {\n        var args = [ ], i = arguments.length, fn;\n        while (i--) { args[i] = arguments[i]; }\n\n        if (typeof args[1] === 'function') {\n            args[1] = wrapFn(args[1], args[1].name, null);\n            // This is intended to interact \"cleverly\" with node's EventEmitter logic.\n            // EventEmitter itself sometimes wraps the event handler callbacks to implement\n            // things such as once(). See https://github.com/nodejs/node/blob/v6.0.0/lib/events.js#L280\n            // In order for removeListener to still work when called with the original unwrapped function\n            // a .listener member is added to the callback which references the original unwrapped function\n            // and the removeListener logic checks this member as well to match wrapped listeners.\n            args[1].listener = arguments[1];\n\n            // the above causes a problem in node v7: EventEmitter.prototype.listeners\n            // unwraps the functions before returning them, so we lose our wrapper and\n            // its associated data. I've tried to avoid mutating things that are not\n            // mine, and use the Node API where I can, but it seems somewhat unavoidable\n            // here\n            Object.defineProperties(arguments[1], {\n                __callSite: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: args[1].__callSite\n                }\n            });\n        }\n\n        return _EventEmitter_addListener.apply(this, args);\n    };\n\n    EventEmitter.prototype.once = function (/*type, listener*/) {\n        var args = [ ], i = arguments.length, fn;\n        while (i--) { args[i] = arguments[i]; }\n\n        var type = args[0], fn = args[1];\n        if (typeof fn === 'function') {\n            args[1] = wrapFn(fn, fn.name, null, function () {\n                this.removeListener(type, fn);\n            });\n            args[1].listener = arguments[1];\n            Object.defineProperties(arguments[1], {\n                __callSite: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: args[1].__callSite\n                }\n            });\n        }\n\n        return _EventEmitter_addListener.apply(this, args);\n    };\n\n    // path must be required before the rest of these\n    // as some of them invoke our hooks on load which\n    // requires path to be available to the above code\n    path = require('path');\n\n    dgramSocket = require('dgram').Socket;\n    HttpServer = require('http').Server;\n    HttpsServer = require('https').Server;\n    Server = require('net').Server;\n    Socket = require('net').Socket;\n    Timer = process.binding('timer_wrap').Timer;\n    TlsServer = require('tls').Server;\n\n    ChildProcess = (function () {\n        var ChildProcess = require('child_process').ChildProcess;\n\n        if (typeof ChildProcess !== 'function') {\n            // node 0.10 doesn't expose the ChildProcess constructor, so we have to get it on the sly\n            var cp = require('child_process').spawn('true', [], { stdio: 'ignore' });\n            ChildProcess = cp.constructor;\n        }\n\n        return ChildProcess;\n    })();\n\n    cluster = require('cluster');\n    var _cluster_fork = cluster.fork;\n    cluster.fork = function (/*env*/) {\n        var worker = _cluster_fork.apply(this, arguments);\n\n        // we get an open handle for a pipe, but no reference to the\n        // worker itself, so we add one, as well as the call site info\n        if (worker && worker.process && worker.process._channel) {\n            Object.defineProperties(worker.process._channel, {\n                __callSite: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: findCallsite(__stack)\n                },\n                __worker: {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: worker\n                }\n            });\n        }\n\n        return worker;\n    };\n})();\n\nfunction formatTime(t) {\n    var labels = ['ms', 's', 'min', 'hr'],\n        units = [1, 1000, 60, 60],\n        i = 0;\n\n    while (i < units.length && t / units[i] > 1) { t /= units[i++]; }\n    return Math.floor(t) + ' ' + labels[i-1];\n};\n\nvar count = 0;\nfunction getCallsite(thing) {\n    if (!thing.__callSite) {\n        var name = ((thing.name ? thing.name : thing.constructor.name) || 'unknown').trim();\n        if (!DONT_INSTRUMENT[name]) {\n            console.warn('Unable to determine callsite for \"'+name+'\". Did you require `wtfnode` at the top of your entry point?');\n        }\n        return { file: 'unknown', line: 0 };\n    }\n    return thing.__callSite;\n};\n\nfunction dump() {\n    console.log('[WTF Node?] open handles:');\n\n    // sort the active handles into different types for logging\n    var sockets = [ ], fds = [ ], servers = [ ], _timers = [ ], processes = [ ], clusterWorkers = [ ], other = [ ];\n    process._getActiveHandles().forEach(function (h) {\n        if (h instanceof Socket) {\n            // stdin, stdout, etc. are now instances of socket and get listed in open handles\n            // todo: a more specific/better way to identify them than the 'fd' property\n            if ((h.fd != null)) { fds.push(h); }\n            else { sockets.push(h); }\n        }\n        else if (h instanceof Server) { servers.push(h); }\n        else if (h instanceof dgramSocket) { servers.push(h); }\n        else if (h instanceof Timer) { _timers.push(h); }\n        else if (h instanceof ChildProcess) { processes.push(h); }\n        else if (h.hasOwnProperty('__worker')) { clusterWorkers.push(h); }\n\n        // catchall\n        else { other.push(h); }\n    });\n\n    if (fds.length) {\n        console.log('- File descriptors: (note: stdio always exists)');\n        fds.forEach(function (s) {\n            var str = '  - fd '+s.fd;\n            if (s.isTTY) { str += ' (tty)'; }\n            if (s._isStdio) { str += ' (stdio)'; }\n            if (s.destroyed) { str += ' (destroyed)'; }\n            console.log(str);\n\n            // this event will source the origin of a readline instance, kind of indirectly\n            var keypressListeners = s.listeners('keypress');\n            if (keypressListeners && keypressListeners.length) {\n                console.log('    - Listeners:');\n                keypressListeners.forEach(function (fn) {\n                    var callSite = getCallsite(fn);\n                    console.log('      - %s: %s @ %s:%d', 'keypress', fn.name || '(anonymous)', callSite.file, callSite.line);\n                });\n            }\n        });\n    }\n\n    // remove cluster workers from child process list\n    clusterWorkers.forEach(function (p) {\n        if (!p.__worker || !p.__worker.process) { return; }\n        var cw = p.__worker.process,\n            idx = processes.indexOf(cw);\n\n        if (idx > -1) { processes.splice(idx, 1); }\n    });\n\n    if (processes.length) {\n        console.log('- Child processes');\n        processes.forEach(function (cp) {\n            var fds = [ ];\n            console.log('  - PID %s', cp.pid);\n            if (!DONT_INSTRUMENT['ChildProcess']) {\n                var callSite = getCallsite(cp);\n                console.log('    - Entry point: %s:%d', callSite.file, callSite.line);\n            }\n            if (cp.stdio && cp.stdio.length) {\n                cp.stdio.forEach(function (s) {\n                    if (s && s._handle && (s._handle.fd != null)) { fds.push(s._handle.fd); }\n                    var idx = sockets.indexOf(s);\n                    if (idx > -1) {\n                        sockets.splice(idx, 1);\n                    }\n                });\n                if (fds && fds.length) {\n                    console.log('    - STDIO file descriptors:', fds.join(', '));\n                }\n            }\n        });\n    }\n\n    if (clusterWorkers.length) {\n        console.log('- Cluster workers');\n        clusterWorkers.forEach(function (cw) {\n            var fds = [ ], cp = cw.__worker.process;\n            console.log('  - PID %s', cp.pid);\n            var callSite = getCallsite(cw);\n            console.log('    - Entry point: %s:%d', callSite.file, callSite.line);\n        });\n    }\n\n    if (sockets.length) {\n        console.log('- Sockets:');\n        sockets.forEach(function (s) {\n            if (s.destroyed) {\n                console.log('  - (?:?) -> %s:? (destroyed)', s._host);\n            } else if (s.localAddress) {\n                console.log('  - %s:%s -> %s:%s', s.localAddress, s.localPort, s.remoteAddress, s.remotePort);\n            } else if (s._handle && (s._handle.fd != null)) {\n                console.log('  - fd %s', s._handle.fd);\n            } else {\n                console.log('  - unknown socket');\n            }\n            var connectListeners = s.listeners('connect');\n            if (connectListeners && connectListeners.length) {\n                console.log('    - Listeners:');\n                connectListeners.forEach(function (fn) {\n                    var callSite = getCallsite(fn);\n                    console.log('      - %s: %s @ %s:%d', 'connect', fn.name || '(anonymous)', callSite.file, callSite.line);\n                });\n            }\n        });\n    }\n\n    if (servers.length) {\n        console.log('- Servers:');\n        servers.forEach(function (s) {\n            var type = 'unknown type';\n            if (s instanceof HttpServer) { type = 'HTTP'; }\n            else if (s instanceof HttpsServer) { type = 'HTTPS'; }\n            else if (s instanceof TlsServer) { type = 'TLS'; }\n            else if (s instanceof Server) { type = 'TCP'; }\n            else if (s instanceof dgramSocket) { type = 'UDP'; }\n\n            try {\n                var a = s.address();\n            } catch (e) {\n                if (type === 'UDP') {\n                    // udp sockets that haven't been bound will throw, but won't prevent exit\n                    return;\n                }\n                throw e;\n            }\n\n            if (a) {\n                console.log('  - %s:%s (%s)', a.address, a.port, type);\n            } else {\n                console.log('  - <unknown address>'); // closed / race condition?\n            }\n\n            var eventType = (\n              type === 'HTTP' || type === 'HTTPS' ? 'request' :\n              type === 'TCP' || type === 'TLS' ? 'connection' :\n              type === 'UDP' ? 'message' :\n              'connection'\n            );\n\n            var listeners = s.listeners(eventType);\n\n            if (listeners && listeners.length) {\n                console.log('    - Listeners:');\n                listeners.forEach(function (fn) {\n                    var callSite = getCallsite(fn);\n                    console.log('      - %s: %s @ %s:%d', eventType, fn.__name || fn.name || '(anonymous)', callSite.file, callSite.line);\n                });\n            }\n        });\n    }\n\n    var timers = [ ], intervals = [ ];\n    _timers.forEach(function (t) {\n        var timer = t._list, cb, cbkey;\n        if (t._list) {\n            // node v5ish behavior\n            do {\n                cbkey = timerCallback(timer);\n                if (cbkey && timers.indexOf(timer) === -1) {\n                    cb = timer[cbkey];\n                    if (cb.__isInterval || cbkey === '_repeat') {\n                        intervals.push(timer);\n                    } else {\n                        timers.push(timer);\n                    }\n                }\n                timer = timer._idleNext;\n            } while (!timer.constructor || timer !== t._list);\n        } else {\n            // node 0.12ish behavior\n            _timers.forEach(function (t) {\n                var timer = t;\n                while ((timer = timer._idleNext)) {\n                    if (timer === t) {\n                        break;\n                    }\n                    cbkey = timerCallback(timer);\n                    if (cbkey && timers.indexOf(timer) === -1) {\n                        cb = timer[cbkey]\n                        if (cb.__isInterval) {\n                            intervals.push(timer);\n                        } else {\n                            timers.push(timer);\n                        }\n                    }\n                }\n\n            });\n        }\n    });\n\n    if (timers.length) {\n        console.log('- Timers:');\n\n        timers.forEach(function (t) {\n            var fn = t[timerCallback(t)],\n                callSite = getCallsite(fn);\n            if (fn.__name) {\n                console.log('  - (%d ~ %s) %s @ %s:%d', t._idleTimeout, formatTime(t._idleTimeout), fn.__name, callSite.file, callSite.line);\n            } else {\n                console.log('  - (%d ~ %s) %s @ %s:%d', t._idleTimeout, formatTime(t._idleTimeout), fn.name, callSite.file, callSite.line);\n            }\n        });\n    }\n\n    if (intervals.length) {\n        console.log('- Intervals:');\n\n        intervals.forEach(function (t) {\n            var fn = t[timerCallback(t)],\n                callSite = getCallsite(fn);\n            if (fn.__name) {\n                console.log('  - (%d ~ %s) %s @ %s:%d', t._idleTimeout, formatTime(t._idleTimeout), fn.__name, callSite.file, callSite.line);\n            } else {\n                console.log('  - (%d ~ %s) %s @ %s:%d', t._idleTimeout, formatTime(t._idleTimeout), fn.name, callSite.file, callSite.line);\n            }\n        });\n    }\n\n    if (other.length) {\n        console.log('- Others:');\n        other.forEach(function (o) {\n            if (!o) { return; }\n            if (o.constructor) { console.log('  - %s', o.constructor.name); }\n            else { console.log('  - %s', o); }\n        });\n    }\n}\n\nfunction init() {\n    process.on('SIGINT', function () {\n        try { dump(); }\n        catch (e) { console.error(e); }\n        process.exit();\n    });\n}\n\nmodule.exports = {\n    dump: dump,\n    init: init\n};\n\nfunction parseArgs() {\n    if (process.argv.length < 3) {\n        console.error('Usage: wtfnode <yourscript> <yourargs> ...');\n        process.exit(1);\n    }\n    var moduleParams = process.argv.slice(3);\n    var modulePath = path.resolve(process.cwd(), process.argv[2]);\n    return [].concat(process.argv[0], modulePath, moduleParams);\n}\n\nif (module === require.main) {\n    init();\n    // The goal here is to invoke the given module in a form that is as\n    // identical as possible to invoking `node <the_module>` directly.\n    // This means massaging process.argv and using Module.runMain to convince\n    // the module that it is the 'main' module.\n    var newArgv = parseArgs(process.argv);\n    var Module = require('module');\n    process.argv = newArgv;\n    Module.runMain();\n}\n","/home/travis/build/npmtest/node-npmtest-wtfnode/node_modules/wtfnode/clustertest.js":"'use strict';\n\nvar wtf = require('./index'),\n    cluster = require('cluster');\n\nif (cluster.isMaster) {\n    var worker = cluster.fork();\n    worker.on('online', function () {\n        wtf.dump();\n        worker.kill();\n    });\n}","/home/travis/build/npmtest/node-npmtest-wtfnode/node_modules/wtfnode/kitchensink.js":"var wtf = require('./index');\n\nvar assert = require('assert');\n    cp = require('child_process'),\n    dgram = require('dgram'),\n    EventEmitter = require('events'),\n    fs = require('fs'),\n    http = require('http'),\n    https = require('https'),\n    net = require('net'),\n    readline = require('readline'),\n    tls = require('tls');\n\nfunction foo() { };\n\nfunction doStuff() {\n  // timers\n  setTimeout(foo, 1000);\n  setInterval(foo, 1000);\n  setTimeout(function inlineNamed() { }, 1000);\n  setTimeout(function () { }, 1000);\n\n  // servers\n  var httpServer = http.createServer(function httpRequestListener() { }).listen();\n\n  var httpsServer = https.createServer({\n      key: fs.readFileSync('./key.pem'),\n      cert: fs.readFileSync('./key-cert.pem')\n  }, function httpsRequestListener() { }).listen();\n\n  var tcpServer = net.createServer(function netConnectionListener() { })\n      .listen(function netListenListener() { });\n\n  var tlsServer = tls.createServer({\n      key: fs.readFileSync('./key.pem'),\n      cert: fs.readFileSync('./key-cert.pem')\n  }, function tlsConnectionListener() { })\n      .listen(function tlsListenListener() { });\n\n  http.createServer();\n  net.createServer();\n\n  readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  wtf.dump();\n\n  console.error('Argv[2..]:', process.argv.slice(2));\n  process.exit();\n}\n\n// child processes\nvar proc = cp.spawn('cat');\n\n// udp servers\nvar unboundUdpServer = dgram.createSocket('udp4');\n\nvar udpServer = dgram.createSocket('udp4');\nudpServer.on('message', function udpMessageListener() { });\nudpServer.once('message', function onceHandler() { });\nudpServer.on('listening', function () {\n  // open socket\n  var socket = net.connect(80, 'www.google.com', doStuff);\n});\n\nudpServer.bind();\n","/home/travis/build/npmtest/node-npmtest-wtfnode/node_modules/wtfnode/proxy.js":"#!/usr/bin/env node\n\n'use strict';\n\n// When binding a SIGINT handler, Node will no longer be able to exit infinite loops\n// To counteract this, we spawn the \"wtf'ed\" module as a child and create a provision\n// to kill the process if it's unresponsive (double Ctrl+C)\n\nvar cp = require('child_process');\nvar PATH = require('path');\n\nvar child = cp.fork(PATH.join(__dirname, 'index.js'), process.argv.slice(2), {\n    cwd: process.cwd(),\n    env: process.env\n});\n\nvar count = 0;\nprocess.on('SIGINT', function () {\n    count++;\n    if (count > 1) {\n        console.error('Forcefully terminating, unable to gather process info');\n        child.kill();\n        process.exit(1);\n    }\n});\n"}